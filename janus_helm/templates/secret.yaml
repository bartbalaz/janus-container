apiVersion: v1
kind: Secret
metadata:
  name: config-params-janus
stringData:
    RUN_WITH_HOST_CONFIGURATION_DIR: "true"
    COPY_JANUS_SAMPLES: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: config-files-nginx
stringData:
  default.conf: |
    server {
        listen 443 ssl;
        server_name {{ .Values.env.clusterName }};
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA256:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EDH+aRSA+AESGCM:EDH+aRSA+SHA256:EDH+aRSA:EECDH:!aNULL:!eNULL:!MEDIUM:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4:!SEED";
        add_header Strict-Transport-Security "max-age=31536000";

        ssl_certificate /certs/tls.crt;
        ssl_certificate_key /certs/tls.key;

        location /janus-samples {
            root /var/www/html;
            index index.html index.htm index.nginx-debian.html;
            # First attempt to serve request as file, then
            # as directory, then fall back to displaying a 404.
            try_files $uri $uri/ =404;
        }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: config-files-janus
stringData:
  janus.eventhandler.sampleevh.jcfg: |
    general: {
        {{ if and .Values.janus.eventUser (and .Values.janus.eventPassword .Values.janus.eventBackendUrl) }}
        enabled = true          
        backend_user = {{ quote .Values.janus.eventUser }}
        backend_pwd = {{ quote .Values.janus.eventPassword }}
        events = "core,sessions"
        grouping = true
        json = "indented"
        backend = {{ quote .Values.janus.eventBackendUrl }}
        {{ else }} 
        enabled = false
        {{ end }}
    }
  janus.jcfg: |
    general: {
            configs_folder = "/janus/etc/janus"  
            plugins_folder = "/janus/lib/janus/plugins"
            transports_folder = "/janus/lib/janus/transports"
            events_folder = "/janus/lib/janus/events"
            loggers_folder = "/janus/lib/janus/loggers"
            debug_level = 4
            {{ if .Values.janus.tokenSecret }}
            token_auth = "true"
            token_auth_secret = {{ quote .Values.janus.tokenSecret }}
            {{ end }}     
            {{ if and .Values.janus.adminPort .Values.janus.adminSecret }}
            admin_secret = {{ quote .Values.janus.adminSecret }} 
            {{ end }}
            protected_folders = [
                    "/bin",
                    "/boot",
                    "/dev",
                    "/etc",
                    "/initrd",
                    "/lib",
                    "/lib32",
                    
                    "/lib64",
                    "/proc",
                    "/sbin",
                    "/sys",
                    "/usr",
                    "/var",
                    "/opt/janus/bin",
                    "/opt/janus/etc",
                    "/opt/janus/include",
                    "/opt/janus/lib",
                    "/opt/janus/lib32",
                    "/opt/janus/lib64",
                    "/opt/janus/sbin"
            ]
    }
    certificates: {
            cert_pem = "/certs/tls.crt"
            cert_key = "/certs/tls.key"
    }
    media: {
    }
    nat: {
            stun_server = {{ quote .Values.janus.nat.stunServer }}
            stun_port = {{ .Values.janus.nat.stunPort }}
            nice_debug = {{ quote .Values.janus.nat.niceDebug }}
            full_trickle = {{ quote .Values.janus.nat.fullTrickle }}
            ice_lite = false
    }
    plugins: {
            disable = "libjanus_voicemail.so, libjanus_recordplay.so libjanus_audiobridge.so, libjanus_nosip.so, libjanus_sip.so, libjanus_streaming.so, libjanus_textroom.so, libjanus_voicemail.so"
    }
    transports: {
            disable = "libjanus_rabbitmq.so, libjanus_pfunix.so"
    }
    loggers: {
            disable = "libjanus_jsonlog.so"
    }
    events: {
            broadcast = true
    }
  janus.plugin.videoroom.jcfg: |
    general: {
            string_ids = true
    }
    room-1234: {
        description = "Demo Room"
        secret = "adminpwd"
        publishers = 6
        bitrate = 128000
        fir_freq = 10
        record = true
        rec_dir = "./janus-recordings"
    }
  janus.transport.http.jcfg: |
    general: {
            json = "indented"
            base_path = "/janus"
            http = false
            https = true
            secure_port = {{ .Values.janus.sessionPort }}
    }
    {{ if and .Values.janus.adminPort .Values.janus.adminSecret }}
    admin: {
            admin_base_path = "/admin"
            admin_http = false
            admin_https = true
            admin_secure_port = {{ .Values.janus.adminPort }}
    }
    {{ end }}
    cors: {
    }
    certificates: {
            cert_pem = "/certs/tls.crt"
            cert_key = "/certs/tls.key"
    }